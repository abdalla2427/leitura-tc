<html>

<head>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <link href='http://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>


    <script type="text/javascript">
        var ip = '<%= nodeServerIp %>' || 'localhost'
        var port = '<%= port %>' || '80'
        var ultimoCsv;

        function fazerRequisicao(value) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    alert(xhr.response);
                    console.log(xhr.response)
                }
            }
            xhr.open('get', `http://${ip}:${port}/` + value, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
            xhr.send();
        }

        function mudarIp() {
            let ip = document.getElementById('alterarIp').value;
            let finalUrl = `alterarIp?ip=${ip}`;
            fazerRequisicao(finalUrl)
        }

        function montarCsv() {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    console.log(xhr.response);
                    ultimoCsv = JSON.parse(xhr.response);
                    downloadCSV(Date.now().toString() + '.csv')
                }
            }
            xhr.open('get', `http://${ip}:${port}/montar_csv`, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
            xhr.send();
        }

        function convertArrayOfObjectsToCSV(args) {
            var result, ctr, keys, columnDelimiter, lineDelimiter, data;

            data = args.data || null;
            if (data == null || !data.length) {
                return null;
            }

            columnDelimiter = args.columnDelimiter || ',';
            lineDelimiter = args.lineDelimiter || '\n';

            keys = Object.keys(data[0]);

            result = '';
            result += keys.join(columnDelimiter);
            result += lineDelimiter;

            data.forEach(function (item) {
                ctr = 0;
                keys.forEach(function (key) {
                    if (ctr > 0) result += columnDelimiter;

                    result += item[key];
                    ctr++;
                });
                result += lineDelimiter;
            });

            return result;
        }

        function downloadCSV(args) {
            var data, filename, link;

            var csv = convertArrayOfObjectsToCSV({
                data: ultimoCsv
            });
            if (csv == null) return;

            filename = args.filename || 'export.csv';

            if (!csv.match(/^data:text\/csv/i)) {
                csv = 'data:text/csv;charset=utf-8,' + csv;
            }
            data = encodeURI(csv);

            link = document.createElement('a');
            link.setAttribute('href', data);
            link.setAttribute('download', filename);
            link.click();
        }

        function alterarTempoEntreCapturas() {
            let tempo = document.getElementById('alterarTempo').value;
            if (Number(tempo)) {
                let finalUrl = `alterarTempo?tempo=${tempo}`;
                fazerRequisicao(finalUrl)
            }
            else {
                alert('Input invalido para tempo.\nUtilize um número válido')
            }
        }
    </script>

    <script>

        window.onload = function () {
            var valoresCapturados = [];
            var chart;
            var chart = new CanvasJS.Chart("chartContainer", {
                title: {
                    text: "Valores Capturados"
                },
                axisY: {
                    maximum: 30
                },
                data: [
                    {
                        type: "spline",
                        dataPoints: []
                    }
                ]
            });

            function atualizarGrafico() {
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4) {
                        valoresCapturados = JSON.parse(xhr.response);
                        var dataPoints = []
                        valoresCapturados.map(valor => dataPoints.push({ y: Number(valor) }))
                        chart.options.data[0].dataPoints = dataPoints;
                        chart.render();
                        document.getElementById('numeroDeAmostrasNoVetor').innerHTML = `Numero de amostras do proximo csv: ${valoresCapturados.length}`
                        //carregarGrafico(a);
                    }
                }
                xhr.open('get', `http://${ip}:${port}/` + 'valores_capturados', true);
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
                xhr.send();
            }

            atualizarGrafico();

            document.getElementById('atualizarGrafico').addEventListener("click", function () {
                atualizarGrafico();
            })

            document.getElementById('acessarLog').addEventListener("click", function() {
                window.open(`http://${ip}:${port}/log`, "_blank"); 
            })
        }

    </script>

    <style>
        html, body, h1 {
            margin: 0;
            padding: 0;
            font-family: 'Roboto', sans-serif;
        }

    </style>
</head>

<body>
    <div class="container" style="width: 100% ;display: flex; flex-direction: column; justify-content: center; align-content: center ;padding: 20px;">
        <div class="acoes" style="display: flex; flex-direction: column;" >
            <h1>Ações</h1>
            <div id="configuracaoLeitura" style="margin-top: 10px;">
                <div>
                    <input id="alterarIp" value="<%= ipAtual %>" type="text" />
                    <button onclick="mudarIp()">Mudar Ip Monitorado</button>
                </div>
    
                <div>
                    <input id="alterarTempo" value="<%= tempoEntreCapturas %>" type="text" />
                    <button onclick="alterarTempoEntreCapturas()">Alterar o tempo Entre capturas</button>
                </div>
            </div>

            <div id="mudarEstadoCaptura" style="display: flex; flex-direction: row; margin-top: 10px;">
                <div style="margin-right: 5px;">
                    <input type="submit" value="Start" onclick="fazerRequisicao('comecar_captura')">
                </div>
    
                <div>
                    <input type="submit" value="Pausar" onclick="fazerRequisicao('pausar_captura')">
                </div>
            </div>

            <div id="exportarCsv" style="margin-top: 10px; display: flex; flex-direction: row; margin-bottom: 10px;">
                <div>
                    <input onclick="montarCsv()" type="submit" value="Exportar .csv">
                </div>
                <div class="logss">
                    <button id="acessarLog">
                        Acessar log da aplicação
                    </button>
                </div>
            </div>

        </div>

        <div class="valores_capturados" style="width: 40%; display: flex; flex-direction: column;">
            <div id="chartContainer" style="height: 370px; width: 100%;"></div>
            <div style="align-self: center; display: flex; flex-direction: column;">
                <div id="numeroDeAmostrasNoVetor"></div>
                <div style="max-width: 200px; align-self: center;">
                    <button id="atualizarGrafico">Atualizar Gráfico</button>
                </div>
            </div>
        </div>
    </div>
</body>

</html>